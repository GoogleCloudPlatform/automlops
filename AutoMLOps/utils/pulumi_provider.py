# Copyright 2023 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Builds Pulumi Files"""

# pylint: disable=C0103
# pylint: disable=line-too-long
# pylint: disable=unused-import

from typing import Dict

from AutoMLOps.utils.utils import (
    write_file,
    make_dirs,
)

from AutoMLOps.utils.constants import (
    GENERATED_LICENSE,
    RIGHT_BRACKET,
    LEFT_BRACKET,
    NEWLINE,
)

from AutoMLOps.utils.enums import PulumiRuntime


def builder(
    project_id: str,
    pipeline_params: Dict,
    pulumi_runtime: PulumiRuntime,
    model_name: str = 'not_specified',
):
    """Constructs and writes pulumi scripts: Generates infrastructure using pulumi resource management style.

    Args:
        top_lvl_name: Top directory name.
        model_name: Name of the model.
    """

    # create pulumi folder
    make_dirs([model_name + '/'])
    pulumi_folder = model_name + '/'

    # create Pulumi.yaml
    write_file(pulumi_folder + 'Pulumi.yaml', _create_pulumi_yaml(
        model_name=model_name,
        pulumi_runtime=pulumi_runtime), 'w+')

    # create Pulumi.dev.yaml
    write_file(pulumi_folder + 'Pulumi.dev.yaml', _create_pulumi_dev_yaml(
        project_id=project_id,
        model_name=model_name,
        pipeline_params=pipeline_params), 'w+')

    # create __main__.py
    if pulumi_runtime == PulumiRuntime.PYTHON:
        write_file(pulumi_folder + '__main__.py', _create_main_python(
        ), 'w+')


def _create_pulumi_yaml(
        model_name: str,
        pulumi_runtime: str) -> str:
    """Generates code for Pulumi.yaml, the pulumi script that contains details to deploy project's GCP environment.

    Returns:
        str: Pulumi.yaml config script.
    """

    return (
        GENERATED_LICENSE +
        f'name: devops_plm_automlops_{model_name}{NEWLINE}'
        f'runtime:{NEWLINE}'
        f'  name: {pulumi_runtime.value}{NEWLINE}'
        f'description: Pulumi stack generated by AutoMLOps for "{model_name}" model{NEWLINE}'
    )


def _create_pulumi_dev_yaml(
        project_id: str,
        model_name: str,
        pipeline_params: Dict
) -> str:
    """Generates code for Pulumi.dev.yaml, the pulumi script that contains details to deploy dev environment config.

    Returns:
        str: Pulumi.dev.yaml config script.
    """

    bucket_name = pipeline_params['data_path'].split('/')[2]

    return (
        GENERATED_LICENSE +
        f'config:{NEWLINE}'
        f'  devops_plm_automlops_{model_name}:general:{NEWLINE}'
        f'    project_id: {project_id}\{NEWLINE}'
        f'    model_name: {model_name}{NEWLINE}'
        f'    environment: dev{NEWLINE}'
        f'    default_region: us-central1{NEWLINE}'
        f'  devops_plm_automlops_{model_name}:buckets:{NEWLINE}'
        f'    - name: {bucket_name}{NEWLINE}'
        f'      location: us-central1{NEWLINE}'
        f'      labels:{NEWLINE}'
        f'        provider: {model_name}{NEWLINE}'
        f'  devops_plm_automlops_{model_name}:service_accounts:{NEWLINE}'
        f'    - account_id: pipeline_runner_sa{NEWLINE}'
        f'      description: For submitting PipelineJobs{NEWLINE}'
        f'      display_name: Pipeline Runner Service Account{NEWLINE}'
        f'      role_bindings:{NEWLINE}'
        f'        - roles/aiplatform.user{NEWLINE}'
        f'        - roles/artifactregistry.reader{NEWLINE}'
        f'        - roles/bigquery.user{NEWLINE}'
        f'        - roles/bigquery.dataEditor{NEWLINE}'
        f'        - roles/iam.serviceAccountUser{NEWLINE}'
        f'        - roles/storage.admin{NEWLINE}'
        f'        - roles/run.admin{NEWLINE}'
        f'    - account_id: cloudbuild_runner_sa{NEWLINE}'
        f'      description: For submitting Cloud Build Jobs{NEWLINE}'
        f'      display_name: Cloud Build Runner Service Account{NEWLINE}'
        f'      role_bindings:{NEWLINE}'
        f'        - roles/run.admin{NEWLINE}'
        f'        - roles/iam.serviceAccountUser{NEWLINE}'
        f'        - roles/cloudtasks.enqueuer{NEWLINE}'
        f'        - roles/cloudscheduler.admin{NEWLINE}'
    )


def _create_main_python(
) -> str:
    """Generates code for __main__.py, the pulumi script that creates the primary resources.

    Args:
        run_local: Flag that determines whether to use Cloud Run CI/CD.

    Returns:
        str: Main pulumi script.
    """

    return (
        GENERATED_LICENSE +
        f'import os{NEWLINE}'
        f'import pulumi{NEWLINE}'
        f'import pulumi_gcp as gcp{NEWLINE}'
        f'from pulumi import Config, log, ResourceOptions, StackReference, export{NEWLINE}'
        f'{NEWLINE}'
        f'config = Config(){NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################\n'
        f'# General Config{NEWLINE}'
        f'#######################################################################################\n'
        f'general_cfg = config.require_object("general"){NEWLINE}'
        f'project_id = general_cfg.get("project_id"){NEWLINE}'
        f'model_name = general_cfg.get("model_name"){NEWLINE}'
        f'environment = general_cfg.get("environment"){NEWLINE}'
        f'default_region = general_cfg.get("default_region"){NEWLINE}'
        f'{NEWLINE}'
        f'vertex_pipeline_name = f"{LEFT_BRACKET}model_name{RIGHT_BRACKET}"{NEWLINE}'
        f'\n'
        f'stack_infra = f"{LEFT_BRACKET}model_name{RIGHT_BRACKET}-{LEFT_BRACKET}environment{RIGHT_BRACKET}"{NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'# Service Accounts Config{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'sas_cfg = config.require_object("service_accounts"){NEWLINE}'
        f'{NEWLINE}'
        f'sas_cfg = list(sas_cfg) if sas_cfg else []{NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'# Storage Config{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'buckets = config.require_object("buckets") or []{NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'# Init{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'try:{NEWLINE}'
        f'    if buckets:{NEWLINE}'
        f'        for i, bucket in enumerate(buckets):{NEWLINE}'
        f'            gcp.storage.Bucket({NEWLINE}'
        f'                resource_name=f"{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}-bucket-{LEFT_BRACKET}i{RIGHT_BRACKET}",{NEWLINE}'
        f'                name=bucket["name"],{NEWLINE}'
        f'                location=bucket["location"],{NEWLINE}'
        f'                labels=bucket["labels"],{NEWLINE}'
        f'                opts=ResourceOptions({NEWLINE}'
        f'                    depends_on=[]{NEWLINE}'
        f'                ){NEWLINE}'
        f'            ){NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'except Exception as ex:{NEWLINE}'
        f'    log.error(f"Environment {LEFT_BRACKET}environment{RIGHT_BRACKET} -> {LEFT_BRACKET}ex{RIGHT_BRACKET}"){NEWLINE}'
        f'    raise ex{NEWLINE}'
        f'#######################################################################################{NEWLINE}'

        # saInit = ServiceAccount(
        #     resource_name=stack_infra,
        #     project=stack_infra,
        #     service_accounts=sas_cfg,
        #     opts=ResourceOptions(
        #         provider=None,
        #         protect=False,
        #         depends_on=[]
        #     )
        # )

        # artifactregistry_repo = gcp.artifactregistry.Repository(
        #     resource_name="my-repo",
        #     project=stack_infra,
        #     description="example docker repository",
        #     format="DOCKER",
        #     location="us-central1",
        #     repository_id="my-repository",
        #     opts=ResourceOptions(
        #         depends_on=[]
        #     )
        # )

        # source_repo = gcp.sourcerepo.Repository(
        #     resource_name="my-repo",
        #     project=stack_infra,
        #     opts=ResourceOptions(
        #         depends_on=[]
        #     )
        # )

        # cloudtasks_queue = gcp.cloudtasks.Queue(
        #     resource_name="cloudtasks_queue",
        #     project=stack_infra,
        #     location="us-central1",
        #     opts=ResourceOptions(
        #         depends_on=[]
        #     )
        # )

        # filename_trigger = gcp.cloudbuild.Trigger(
        #     resource_name="filename-trigger",
        #     project=stack_infra,
        #     filename="cloudbuild.yaml",
        #     service_account=saInit.created_service_accounts[1].email
        #     location="us-central1",
        #     substitutions={
        #     "_BAZ": "qux",
        #     "_FOO": "bar",
        # },
        # trigger_template=gcp.cloudbuild.TriggerTriggerTemplateArgs(
        #     branch_name="main",
        #     repo_name="my-repo",
        # ))
    )
