# Copyright 2023 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Builds Pulumi Files"""

# pylint: disable=C0103
# pylint: disable=line-too-long
# pylint: disable=unused-import

from typing import Dict

from AutoMLOps.utils.utils import (
    write_file,
    make_dirs,
)

from AutoMLOps.utils.constants import (
    GENERATED_LICENSE,
    RIGHT_BRACKET,
    LEFT_BRACKET,
    NEWLINE,
)

from AutoMLOps.utils.enums import PulumiRuntime


def builder(
    project_id: str,
    pipeline_params: Dict,
    pulumi_runtime: PulumiRuntime,
    model_name: str = 'not_specified',
    region: str = 'us-central1',
    artifact_repo_name: str = 'automlops_artifact_repo',
    source_repo_name: str = 'automlops_source_repo',
    cloudtasks_queue: str = 'automlops_cloudtasks_queue'
):
    """Constructs and writes pulumi scripts: Generates infrastructure using pulumi resource management style.

    Args:
        top_lvl_name: Top directory name.
        model_name: Name of the model.
        ##extend arguments descriptions
    """

    # create pulumi folder
    make_dirs([model_name + '/'])
    pulumi_folder = model_name + '/'

    # create Pulumi.yaml
    write_file(pulumi_folder + 'Pulumi.yaml', _create_pulumi_yaml(
        model_name=model_name,
        pulumi_runtime=pulumi_runtime), 'w+')

    # create Pulumi.dev.yaml
    write_file(pulumi_folder + 'Pulumi.dev.yaml', _create_pulumi_dev_yaml(
        project_id=project_id,
        model_name=model_name,
        pipeline_params=pipeline_params,
        region=region), 'w+')

    # create __main__.py
    if pulumi_runtime == PulumiRuntime.PYTHON:
        write_file(pulumi_folder + '__main__.py', _create_main_python(
            artifact_repo_name,
            source_repo_name,
            cloudtasks_queue,
        ), 'w+')


def _create_pulumi_yaml(
        model_name: str,
        pulumi_runtime: str) -> str:
    """Generates code for Pulumi.yaml, the pulumi script that contains details to deploy project's GCP environment.

    Returns:
        str: Pulumi.yaml config script.
    """

    return (
        GENERATED_LICENSE +
        f'name: devops_plm_automlops_{model_name}{NEWLINE}'
        f'runtime:{NEWLINE}'
        f'  name: {pulumi_runtime.value}{NEWLINE}'
        f'description: Pulumi stack generated by AutoMLOps for "{model_name}" model{NEWLINE}'
    )


def _create_pulumi_dev_yaml(
        project_id: str,
        model_name: str,
        pipeline_params: Dict,
        region: str,
) -> str:
    """Generates code for Pulumi.dev.yaml, the pulumi script that contains details to deploy dev environment config.

    Returns:
        str: Pulumi.dev.yaml config script.
    """

    bucket_name = pipeline_params['data_path'].split('/')[2]

    return (
        GENERATED_LICENSE +
        f'config:{NEWLINE}'
        f'  devops_plm_automlops_{model_name}:general:{NEWLINE}'
        f'    project_id: {project_id}\{NEWLINE}'
        f'    model_name: {model_name}{NEWLINE}'
        f'    environment: dev{NEWLINE}'
        f'    default_region: {region}{NEWLINE}'
        f'  devops_plm_automlops_{model_name}:buckets:{NEWLINE}'
        f'    - name: {bucket_name}{NEWLINE}'
        f'      location: {region}{NEWLINE}'
        f'      labels:{NEWLINE}'
        f'        provider: {model_name}{NEWLINE}'
        f'  devops_plm_automlops_{model_name}:service_accounts:{NEWLINE}'
        f'    - account_id: pipeline_runner_sa{NEWLINE}'
        f'      description: For submitting PipelineJobs{NEWLINE}'
        f'      display_name: Pipeline Runner Service Account{NEWLINE}'
        f'      role_bindings:{NEWLINE}'
        f'        - roles/aiplatform.user{NEWLINE}'
        f'        - roles/artifactregistry.reader{NEWLINE}'
        f'        - roles/bigquery.user{NEWLINE}'
        f'        - roles/bigquery.dataEditor{NEWLINE}'
        f'        - roles/iam.serviceAccountUser{NEWLINE}'
        f'        - roles/storage.admin{NEWLINE}'
        f'        - roles/run.admin{NEWLINE}'
        f'    - account_id: cloudbuild_runner_sa{NEWLINE}'
        f'      description: For submitting Cloud Build Jobs{NEWLINE}'
        f'      display_name: Cloud Build Runner Service Account{NEWLINE}'
        f'      role_bindings:{NEWLINE}'
        f'        - roles/run.admin{NEWLINE}'
        f'        - roles/iam.serviceAccountUser{NEWLINE}'
        f'        - roles/cloudtasks.enqueuer{NEWLINE}'
        f'        - roles/cloudscheduler.admin{NEWLINE}'
        f'  devops_plm_automlops_:service_accounts_iam:{NEWLINE}'
        f'    - name: pipeline_runner_sa{NEWLINE}'
        f'      account_id: serviceAccount:pipeline_runner_sa@{project_id}.iam.gserviceaccount.com"{NEWLINE}'
        f'      description: IAM roles for submitting PipelineJobs{NEWLINE}'
        f'      role_bindings:{NEWLINE}'
        f'        - roles/aiplatform.user{NEWLINE}'
        f'        - roles/artifactregistry.reader{NEWLINE}'
        f'        - roles/bigquery.user{NEWLINE}'
        f'        - roles/bigquery.dataEditor{NEWLINE}'
        f'        - roles/iam.serviceAccountUser{NEWLINE}'
        f'        - roles/storage.admin{NEWLINE}'
        f'        - roles/run.admin{NEWLINE}'
        f'    - name: cloudbuild_runner_sa{NEWLINE}'
        f'      account_id: serviceAccount:cloudbuild_runner_sa@{project_id}.iam.gserviceaccount.com{NEWLINE}'
        f'      description: IAM roles for submitting Cloud Build Jobs{NEWLINE}'
        f'      role_bindings:{NEWLINE}'
        f'        - roles/run.admin{NEWLINE}'
        f'        - roles/iam.serviceAccountUser{NEWLINE}'
        f'        - roles/cloudtasks.enqueuer{NEWLINE}'
        f'        - roles/cloudscheduler.admin{NEWLINE}'
    )


def _create_main_python(
    artifact_repo_name,
    source_repo_name,
    cloudtasks_queue,
) -> str:
    """Generates code for __main__.py, the pulumi script that creates the primary resources.

    Args:
        run_local: Flag that determines whether to use Cloud Run CI/CD.

    Returns:
        str: Main pulumi script.
    """

    return (
        GENERATED_LICENSE +
        f'import os{NEWLINE}'
        f'import pulumi{NEWLINE}'
        f'import pulumi_gcp as gcp{NEWLINE}'
        f'from pulumi import Config, log, ResourceOptions, StackReference, export{NEWLINE}'
        f'{NEWLINE}'
        f'config = Config(){NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################\n'
        f'# General Config{NEWLINE}'
        f'#######################################################################################\n'
        f'general_cfg = config.require_object("general"){NEWLINE}'
        f'project_id = general_cfg.get("project_id"){NEWLINE}'
        f'model_name = general_cfg.get("model_name"){NEWLINE}'
        f'environment = general_cfg.get("environment"){NEWLINE}'
        f'default_region = general_cfg.get("default_region"){NEWLINE}'
        f'{NEWLINE}'
        f'vertex_pipeline_name = f"{LEFT_BRACKET}model_name{RIGHT_BRACKET}"{NEWLINE}'
        f'\n'
        f'stack_infra = f"{LEFT_BRACKET}model_name{RIGHT_BRACKET}-{LEFT_BRACKET}environment{RIGHT_BRACKET}"{NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'# Service Accounts Config{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'service_accounts = config.require_object("service_accounts") or []{NEWLINE}'
        f'{NEWLINE}'
        # f'sas_cfg = list(sas_cfg) if sas_cfg else []{NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'# Storage Config{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'buckets = config.require_object("buckets") or []{NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'# IAMMember Bindings Config{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'iam_cfgs = config.require_object("service_accounts_iam") or []{NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'# Init{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'try:{NEWLINE}'
        f'    if buckets:{NEWLINE}'
        f'        for i, bucket in enumerate(buckets):{NEWLINE}'
        f'            gcp.storage.Bucket({NEWLINE}'
        f'                resource_name=f"{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}-{LEFT_BRACKET}bucket[\"name\"]{RIGHT_BRACKET}-{LEFT_BRACKET}i{RIGHT_BRACKET}",{NEWLINE}'
        f'                project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'                name=bucket["name"],{NEWLINE}'
        f'                location=bucket["location"],{NEWLINE}'
        f'                labels=bucket["labels"],{NEWLINE}'
        f'                opts=ResourceOptions({NEWLINE}'
        f'                    depends_on=[]{NEWLINE}'
        f'                ){NEWLINE}'
        f'            ){NEWLINE}'
        f'{NEWLINE}'
        f'    if service_accounts:{NEWLINE}'
        f'        for i, service_account in enumerate(service_accounts):{NEWLINE}'
        f'            gcp.service_account.Account({NEWLINE}'
        f'                resource_name=f"{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}-{LEFT_BRACKET}service_account[\"account_id\"]{RIGHT_BRACKET}-{LEFT_BRACKET}i{RIGHT_BRACKET}",{NEWLINE}'
        f'                project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'                account_id=service_account["account_id"],{NEWLINE}'
        f'                display_name=service_account["display_name"],{NEWLINE}'
        f'                description=service_account["description"],{NEWLINE}'
        f'                opts=ResourceOptions({NEWLINE}'
        f'                    depends_on=[]{NEWLINE}'
        f'                ){NEWLINE}'
        f'            ){NEWLINE}'
        f'{NEWLINE}'
        f'##################################################################################{NEWLINE}'
        f'## Google Ads IAMMember - devops_plm_env_bronze_datalake_google_ads:google_ads_iam{NEWLINE}'
        f'##################################################################################{NEWLINE}'
        f'    if iam_cfgs:{NEWLINE}'
        f'        for iam_role, iam_obj in enumerate(iam_cfgs):{NEWLINE}'
        f'            gcp.projects.IAMMember({NEWLINE}'
        f'                resource_name=f"{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}-{LEFT_BRACKET}iam_obj[\"name\"]{RIGHT_BRACKET}-{LEFT_BRACKET}iam_obj[\"role_bindings\"].index(iam_role){RIGHT_BRACKET}",{NEWLINE}'
        f'                member=iam_obj["account_id"],{NEWLINE}'
        f'                project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'                role={LEFT_BRACKET}iam_role{RIGHT_BRACKET},{NEWLINE}'
        f'                opts=ResourceOptions({NEWLINE}'
        f'                    depends_on=[{NEWLINE}'
        f'                    ]{NEWLINE}'
        f'                ),{NEWLINE}'
        f'            ){NEWLINE}'
        f'{NEWLINE}'
        f'    artifactregistry_repo = gcp.artifactregistry.Repository({NEWLINE}'
        f'        resource_name=f"{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}_{LEFT_BRACKET}artifact_repo_name{RIGHT_BRACKET}",{NEWLINE}'
        f'        project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'        description="Docker artifact repository",{NEWLINE}'
        f'        format="DOCKER",{NEWLINE}'
        f'        location=f"{LEFT_BRACKET}default_region{RIGHT_BRACKET}",{NEWLINE}'
        f'        repository_id=f"{LEFT_BRACKET}artifact_repo_name{RIGHT_BRACKET}",{NEWLINE}'
        f'        opts=ResourceOptions({NEWLINE}'
        f'            depends_on=[]{NEWLINE}'
        f'        ){NEWLINE}'
        f'    ){NEWLINE}'
        f'{NEWLINE}'
        f'    source_repo = gcp.sourcerepo.Repository({NEWLINE}'
        f'        resource_name=f"{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}_{LEFT_BRACKET}source_repo_name{RIGHT_BRACKET}",{NEWLINE}'
        f'        name={LEFT_BRACKET}source_repo_name{RIGHT_BRACKET},{NEWLINE}'
        f'        project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'        opts=ResourceOptions({NEWLINE}'
        f'            depends_on=[]{NEWLINE}'
        f'        ){NEWLINE}'
        f'    ){NEWLINE}'
        f'{NEWLINE}'
        f'    cloudtasks_queue = gcp.cloudtasks.Queue({NEWLINE}'
        f'        resource_name="{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}_{LEFT_BRACKET}cloudtasks_queue{RIGHT_BRACKET}",{NEWLINE}'
        f'        name=f"{LEFT_BRACKET}cloudtasks_queue{RIGHT_BRACKET}"{NEWLINE}'
        f'        project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'        location=f"{LEFT_BRACKET}default_region{RIGHT_BRACKET}",{NEWLINE}'
        f'        opts=ResourceOptions({NEWLINE}'
        f'            depends_on=[]{NEWLINE}'
        f'        ){NEWLINE}'
        f'    ){NEWLINE}'
        f'{NEWLINE}'
        f'    cloudbuild_trigger = gcp.cloudbuild.Trigger({NEWLINE}'
        f'        resource_name="{LEFT_BRACKET}stack_infra{RIGHT_BRACKET}_cloud_build_trigger",{NEWLINE}'
        f'        project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'        filename="cloudbuild.yaml",{NEWLINE}'
        f'        service_account=f"cloudbuild_runner_sa@{LEFT_BRACKET}project_id{RIGHT_BRACKET}.iam.gserviceaccount.com",{NEWLINE}'
        f'        location=f"{LEFT_BRACKET}default_region{RIGHT_BRACKET}",{NEWLINE}'
            # substitutions={
            # "_BAZ": "qux",
            # "_FOO": "bar",
            # },
        f'        trigger_template=gcp.cloudbuild.TriggerTriggerTemplateArgs({NEWLINE}'
        f'            project={LEFT_BRACKET}project_id{RIGHT_BRACKET},{NEWLINE}'
        f'            branch_name="main",{NEWLINE}'
        f'            repo_name=f"{LEFT_BRACKET}source_repo.name{RIGHT_BRACKET}",{NEWLINE}'
        f'        ){NEWLINE}'
        f'    ){NEWLINE}'
        f'{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
        f'except Exception as ex:{NEWLINE}'
        f'    log.error(f"Environment {LEFT_BRACKET}environment{RIGHT_BRACKET} -> {LEFT_BRACKET}ex{RIGHT_BRACKET}"){NEWLINE}'
        f'    raise ex{NEWLINE}'
        f'#######################################################################################{NEWLINE}'
    )
